{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
tuple empty_tuple() asm "NIL";

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  int n = matrixA.tlen();
  tuple tA = matrixA.at(0);

  int m = tA.tlen();

  tuple tB = matrixB.at(0);
  int p = tB.tlen();

  tuple ans = empty_tuple();

  int i = 0;
  while (i < n) {
    tuple r = empty_tuple();

    tuple row = matrixA.at(i);
    
    int k = 0;
    while (k < p) {

      int el = 0;
      int j = 0;
      while (j < m) {
        tuple column = matrixB.at(j);
        
        el += row.at(j) * column.at(k);
        j += 1;
      }

      r~push_back(el);
      ;;~dump(r);
      k += 1;
    }

    ans~push_back(r);
    i += 1;
  }
  ;;~dump(ans);
  return ans;
}