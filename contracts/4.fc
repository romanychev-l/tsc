{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice str_part = text.begin_parse();
  int flag = str_part~load_uint(32);

  builder str_builder = begin_cell();

  while (slice_bits(str_part)) {
    int char = str_part~load_uint(8);
    if (((char > 64) & (char < 91)) | ((char > 96) & (char < 123))) {
      char = shift_char(char, shift, true);
    }
    str_builder~store_uint(char, 8);
  }

  return str_builder.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice str_part = text.begin_parse();
  int flag = str_part~load_uint(32);

  builder str_builder = begin_cell();

  while (slice_bits(str_part)) {
    int char = str_part~load_uint(8);
    if (((char > 64) & (char < 91)) | ((char > 96) & (char < 123))) {
      char = shift_char(char, shift, false);
    }
    str_builder~store_uint(char, 8);
  }

  return str_builder.end_cell();
}

(int) shift_char(int char, int shift, int encript?) {
  int lowercase? = false;
  if (char > 96) {
    lowercase? = true;
  }
  if (encript?) {
    if (lowercase?) {
      char = 97 + ((char - 97 + shift) % 26);
    } else {
      char = 65 + ((char - 65 + shift) % 26);
    }
  } else {
    repeat (shift) {
      char -= 1;
      if (lowercase?) {
        if (char < 97) {
          char = 122;
        }
      } else {
        if (char < 65) {
          char = 90;
        }
      }
    }
  }

  return char;
}